<?php
Doctrine_Manager::getInstance()->bindComponent('Rights', 'doctrine');
/**
 * BaseRights
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @property integer $id
 * @property string $name
 * @property integer $rights
 * @property integer $roleId
 * @property Role $role
 *
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7691 2011-02-04 15:43:29Z jwage $
 */
abstract class BaseRights extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('rights');
        $this->hasColumn('id', 'integer', 20, array(
             'primary' => true,
             'type' => 'integer',
             'autoincrement' => true,
             'comment' => 'PK',
             'length' => '20',
             ));
        $this->hasColumn('name', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('rights', 'integer', 3, array(
             'type' => 'integer',
             'comment' => 'It describe permission of the role over sites, contents, administration, statistic, system manager',
             'length' => '3',
             ));
        $this->hasColumn('description', 'string', 512, array(
                'type' => 'string',
                'comment' => 'right description',
                'length' => '512',
        ));
        $this->hasColumn('roleId', 'integer', 20, array(
             'type' => 'integer',
             'comment' => 'FK to role.id',
             'length' => '20',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Role as role', array(
             'local' => 'roleId',
             'foreign' => 'id'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             'created' =>
             array(
              'name' => 'created_at',
             ),
             'updated' =>
             array(
              'name' => 'updated_at',
             ),
             ));
        $this->actAs($timestampable0);
    }
}
