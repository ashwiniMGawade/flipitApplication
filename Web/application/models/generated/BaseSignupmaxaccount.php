<?php
// Connection Component Binding
//Doctrine_Manager::getInstance()->bindComponent('Signupmaxaccount', 'doctrine_site');

/**
 * BaseSignupmaxaccount
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @property integer $id
 * @property integer $entered_uid
 * @property string $no_of_acc
 * @property integer $status
 * @property boolen $email_confirmation
 * @property string $locale
 * @property string $homepagebanner_name
 * @property string $homepagebanner_path
 * @property string $homepage_widget_banner_name
 * @property string $homepage_widget_banner_path
 * @property timestamp $created_at
 * @property timestamp $updated_at
 *
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7691 2011-02-04 15:43:29Z jwage $
 */
abstract class BaseSignupmaxaccount extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('signupmaxaccount');
        $this->hasColumn('id', 'integer', 8, array(
             'type' => 'integer',
             'length' => 8,
             'fixed' => false,
             'unsigned' => false,
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('entered_uid', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('no_of_acc', 'string', 255, array(
             'type' => 'string',
             'length' => 255,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('max_account', 'string', 255, array(
                'type' => 'string',
                'length' => 255,
                'fixed' => false,
                'unsigned' => false,
                'primary' => false,
                'notnull' => true,
                'autoincrement' => false,
        ));
        $this->hasColumn('status', 'integer', 4, array(
             'type' => 'integer',
             'length' => 4,
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('email_confirmation', 'boolean', null, array(
                'default' => 0,
                'type' => 'boolean',
        ));
        $this->hasColumn('showTestimonial', 'boolean', null, array(
                'default' => 0,
                'type' => 'boolean',
        ));
        $this->hasColumn('sendername', 'string', 50, array(
                'type' => 'string',
                'length' => 50,
                'fixed' => false,
                'unsigned' => false,
                'primary' => false,
                'notnull' => true,
                'autoincrement' => false,
        ));
        $this->hasColumn('emailsubject', 'string', 50, array(
                'type' => 'string',
                'length' => 50,
                'fixed' => false,
                'unsigned' => false,
                'primary' => false,
                'notnull' => true,
                'autoincrement' => false,
        ));
        $this->hasColumn('emailperlocale', 'text',  array(
                'type' => 'text',
                'length' => 50,
                'fixed' => false,
                'unsigned' => false,
                'primary' => false,
                'notnull' => true,
                'autoincrement' => false,
        ));
        $this->hasColumn('email_header', 'blob', null, array(
                'type' => 'blob',
        ));
        $this->hasColumn('email_footer', 'blob', null, array(
                'type' => 'blob',
        ));
        $this->hasColumn('testimonial1', 'text', null, array(
                'type' => 'blob',
        ));
        $this->hasColumn('testimonial2', 'text', null, array(
                'type' => 'blob',
        ));
        $this->hasColumn('testimonial3', 'text', null, array(
                'type' => 'blob',
        ));

        $this->hasColumn('homepagebanner_name', 'string', 255, array(
                'type' => 'string',
        ));

        $this->hasColumn('homepagebanner_path', 'string', 255, array(
                'type' => 'string',
        ));


        $this->hasColumn('homepage_widget_banner_name', 'string', 255, array(
                'type' => 'string',
        ));

        $this->hasColumn('homepage_widget_banner_path', 'string', 255, array(
                'type' => 'string',
                'default' => 0,
        ));
        $this->hasColumn('newletter_is_scheduled', 'boolean', 1, array(
                'type' => 'boolean',
                'notnull' => false ,
                'default' => 0,
                'length' => 1,
                'comment' => '1-scheduled ,0-manual'
        ));
        $this->hasColumn('newletter_scheduled_time', 'timestamp', 20, array(
                'default' => date("Y-m-d H:i:s"),
                'type'   => 'timestamp',
                'comment' => 'newsletter scheduled timestamp'
        ));

        $this->hasColumn('created_at', 'timestamp', null, array(
             'type' => 'timestamp',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('updated_at', 'timestamp', null, array(
             'type' => 'timestamp',
             'fixed' => false,
             'unsigned' => false,
             'primary' => false,
             'notnull' => true,
             'autoincrement' => false,
             ));
        $this->hasColumn('newsletter_sent_time', 'timestamp', 20, array(
                'type'   => 'timestamp'
        ));
    }

    public function setUp()
    {
        parent::setUp();

        $timestampable0 = new Doctrine_Template_Timestampable(array(
                'created' =>
                array(
                        'name' => 'created_at',
                ),
                'updated' =>
                array(
                        'name' => 'updated_at',
                ),
        ));

        $this->actAs($timestampable0);
    }
}
