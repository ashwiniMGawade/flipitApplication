<?php
/**
 * Chain
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##Er.kundal## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7691 2011-02-04 15:43:29Z jwage $
 */
class Chain extends BaseChain
{
    ######### refactored code #################
    public static function updateChainItemLocale($newLocale, $oldLocale)
    {
        Doctrine_Query::create()
            ->update('ChainItem')
            ->set("locale", '"'.$newLocale.'"')
            ->where("locale = "."'".$oldLocale."'")
            ->execute();
        return true;
    }
    ######### end refactored code #################
     /**
      *  saveChain
      *
      *  save a new chain into data base
      *  @param object $request requets object
      *  @author sp singh
      */
      public function saveChain($request)
      {
            $name = $request->getParam('name' , false);
            $website = $request->getParam('locale' , false);

            if($name) {
                try {

                    $this->name = $name ;
                    $this->save();
                    return true ;

                } catch (Exception $e) {

                    return  false ;
                }
            } else {
                return false ;
            }
      }

    /**
    * returnChainList
    *
    * return  all chains from data base
    *
    * @return array chain list for dattable.js date feed
    */
    public static function returnChainList($params)
    {

        $srh =  @$params["searchText"] != 'undefined' ? @$params["searchText"] : '';

        $chainList = Doctrine_Query::create ()
        ->select ("c.name")
        ->from ( "Chain c")
        ->addSelect("(SELECT count(ci.id) FROM ChainItem ci WHERE ci.chainId = c.id ) as totalShops")
        ->where("c.name LIKE ?", "$srh%");


        $list = DataTable_Helper::generateDataTableResponse($chainList,
        $params,array("__identifier" => 'c.id', 'name', 'totalShops'),
        array(),array());

        return $list;
    }


    /**
     * deleteChain
     *
     * delete chain and chains items
     * @param integer $id chain id
     * @return boolean true on delete otherwise false
     */
    public static function deleteChain($id)
    {
        try {

            $chain = Doctrine_Core::getTable("Chain")->find($id);
            $chain->delete();

            return true ;
        } catch (Exception $e) {

            return false;
        }

    }

    /**
     * execute before deletion of a chain and
     * will update varnish for this particular chain items
     *
     * @see Doctrine_Record::preDelete()
     */
    public function preDelete($event)
    {
        $chainItem = new ChainItem();
        $chainItem->updateVarnish($this->id);
        $chainItem->free(true);
    }


    /**
     * returnChainDetail
     *
     * @param integer $id chain id
     * @return array return chain detail
     */
    public static function returnChainDetail($id)
    {
        try {
            return Doctrine_Core::getTable("Chain")->find($id)->toArray();
        } catch (Exception $e) {

            return false;
        }

    }


    /**
    * returnChainData
    *
    * return  all chains items data for shop page
    *
    * @param integer $id chain id to retrieve all chain item
    * @param integer $shopId shop if on which chain is being rendered
    * @return array
    */
    public static function returnChainData($chainItemId, $shopId)
    {
        $pattern = "~((?:.+://|)(?:www.|))(flipit.com/[a-z]{2}|kortingscode.nl)~";
        $permalink = trim(HTTP_PATH_LOCALE, '/');
        $replacement = '$2';
        $currentSite = preg_replace($pattern, $replacement, $permalink);
        $chainInformation = Doctrine_Query::create()
            ->select("c.name,ci.shopName,ci.permalink,w.name,w.url,ci.locale as locale,ci.shopId as shopId,w.chain")
            ->from("Chain c")
            ->leftJoin("c.chainItem ci")
            ->leftJoin("ci.website w")
            ->where("c.id = (SELECT cii.chainId FROM ChainItem cii where cii.id = ?)", $chainItemId)
            ->andWhere("ci.status = 1")
            ->orderBy("w.name ASC")
            ->fetchArray();
        $chain = array();

        if (!isset($chainInformation[0])) {
            return false;
        }

        $chainInformation = $chainInformation[0];
        foreach ($chainInformation['chainItem'] as $chainValue) {
            $locale = explode('_', $chainValue['locale']);
            $locale = isset($locale[1]) ? $locale[1] : $locale[0];
            $hrefLocale = isset($chainValue['locale']) ? $chainValue['locale'] : 'nl_NL';
            $websiteUrl  = $chainValue['website']['url'] . '/' . $chainValue['permalink'] ;
            $hrefLang = isset($chainValue['website']['chain']) && $chainValue['website']['chain'] != '' ?
                $chainValue['website']['chain'] : preg_replace('~_~', '-', $hrefLocale);
            $headLink = sprintf(
                '<link rel="alternate" hreflang="%s" href="%s"/>',
                $hrefLang,
                $websiteUrl
            );
            $shop = array();

            if ($chainValue['website']['name'] != $currentSite || $shopId != $chainValue['shopId']) {
                $shop = array(
                    'name' => $chainInformation['name'],
                    'shop' => $chainValue['shopName'],
                    'locale' => strtoupper($locale),
                    'url' => $websiteUrl
                );
            }

            $chain[] = array('shops' => $shop, 'headLink' => $headLink);
        }
        return $chain;
    }


    /**
    * get top five chains
    * @param string $keyword
    * @return array $data
    *
    */
    public static function searchChain($keyword)
    {
        $data = Doctrine_Query::create()->select('c.name as name')
                                        ->from("Chain as c")
                                        ->andWhere("c.name LIKE ?", "$keyword%")
                                        ->orderBy("c.name ASC")
                                        ->limit(5)->fetchArray();
            return $data;
    }

}
