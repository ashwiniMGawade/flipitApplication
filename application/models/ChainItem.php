<?php
/**
 * ChainItem
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##Er.kundal## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7691 2011-02-04 15:43:29Z jwage $
 */
class ChainItem extends BaseChainItem
{

	 /**
	  *  saveChain
	  *
	  *  save a new chain into data base
	  *  @param object $request requets object
	  *  @param string $locale selected site locale from signupmaxaccount model
	  *  @author sp singh
	  */
	  public function saveChain($request,$locale)
	  {
	  		#fetch shop id or it would be false id not exists
	  		$shopId = $request->getParam('searchShopId' , false);

	  		if(! $shopId)
	  		{
	  			return false ;
	  		}

	  		# verfiy a valid shop existence
	  		$shop = Doctrine_Core::getTable("Shop")->find($shopId);




	  		if($shop->id > 0)
	  		{

		  		$shopName = $shop->name;
		  		$shopPermalink = $shop->permaLink;
		  		$website = $request->getParam('locale' , false);
		  		$chain = $request->getParam('chain' , false);


			  		if($shopName && $website && $chain)
			  		{
			  			try {

				  			$this->websiteId = $website;
				  			$this->shopName = $shopName ;
				  			$this->permalink = $shopPermalink ;
				  			$this->chainId = $chain ;
				  			$this->shopId = $shopId;
				  			$this->locale = $locale;

				  			# check if shop is online and also show chian status
				  			if($shop->status == 1 && $shop->showChains == 1)
				  			{
					  			$this->status = 1 ;
				  			} else {
				  				$this->status = 0 ;
				  			}


				  			$this->save();

				  			# update chain id in the shop model
			  				if($this->id)
			  				{
								$shop->addChain($this->id);
			  				}


				  			return $this->id ;
			  			} catch (Exception $e) {
			  				return  false ;
			  			}
			  		}
	  		} else {
	  			return false ;
	  		}
	  }

	  /**
	   * returnChainItemList
	   *
	   * return  all chains items from data base
	   *
	   * @return array chain item list for dattable.js date feed
	   */
	  public static function returnChainItemList($params)
	  {

		$chainList = Doctrine_Query::create ()
				->select ("c.shopName as shopName,w.name as website,c.locale as locale,c.status as status")
				->from ( "ChainItem c")
				->leftJoin("c.website w")
				->where("c.chainId = ?" , $params["id"]);
	 
			 

				$list = DataTable_Helper::generateDataTableResponse($chainList,
				$params,array("__identifier" => 'c.id','c.id','shopName','website','locale','status'),
				array(),array());

			return $list;
	}

	/**
	 * getChainItemDetail
	 *
	 * @param integer $id chain item id
	 * @return array chain item detail
	 */
	public static function getChainItemDetail($id)
	{
		return  Doctrine_Query::create ()
			->select ("c.shopName as shopName,c.permalink,w.name as website,w.url as websiteUrl,c.locale as locale,w.id as websiteId")
			->from ( "ChainItem c")
			->leftJoin("c.website w")
			->where("c.id = ?" , $id)
			->fetchOne(null,Doctrine::HYDRATE_ARRAY);
	}
	/**
	 * deleteChainItem
	 *
	 * @param integer $id chain item id
	 * @return boolean true on delete otherwise false
	 */
	public static function deleteChainItem($id)
	{
		try {
			return Doctrine_Core::getTable("ChainItem")->find($id)->delete();
		} catch (Exception $e) {

			return false;
		}

	}


	/**
	 * fetchAllChainItems
	 *
	 * @param integer $id chain item id
	 * @return array chain items detail
	 */
	public static function fetchAllChainItems($id)
	{
		return  Doctrine_Query::create ()
			->select ("c.shopName as shopName,c.permalink,w.name as website,w.url as websiteUrl,c.locale as locale,w.id as websiteId")
			->from ( "ChainItem c")
			->leftJoin("c.website w")
			->where("c.chainId = ?" , $id)
			->fetchArray();
	}

	# update shop detail when a shop is being updated
	public function update($data = false ,$shop)
	{

		# if show chain is on then modify status based on hsop status
		if($shop['showChains'] == 1) {

			if(isset($data['status']))
			{
				$this->status = $data['status'];
			}else{
				# check offline status before update chian status
				if($shop['status'])
				{
					$this->status = 1 ;
				}
			}

		} else {
			$this->status = 0 ;
		}



		# check deletd status
		if(isset($data['deleted'])){

			if($data['deleted'] ==1)
			{
				$this->status =  0 ;
			} else {

				# chekc show chains in case of shop is beiong restore
				if($shop['showChains'] == 1 && $shop['status'] == 1)
				{
					$this->status =   1 ;
				}
			}
		}

		# check if shop name is modified
		if(isset($data['name'])) {
			$this->shopName = $data['name'];
		}

		#check if shop permalink is modified
		if(isset($data['permaLink'])){
			$this->permalink = $data['permaLink'];
		}

		$this->save();

	}

	/*
	 * update varnish after a chain is deleted
	 */
	public  function postDelete($event)
	{
		$this->updateVarnish();
	}

	/**
	 * update varnish when a shop will be updated
	 * @see Doctrine_Record::postUpdate()
	 */
	public function postUpdate($event) {

		//$this->updateVarnish();
	}

	/**
	 * update varnish when a shop will be added
	 * @see Doctrine_Record::postSave()
	 */
	public  function postSave($event)
	{
		//$this->updateVarnish();
	}

	/**
	 * update varnish when a shop will be deleted
	 * @see Doctrine_Record::preDelete()
	 */
	public function preDelete($event)
	{
		$this->updateVarnish();
	}

	/**
	 * updateVarnish
	 *
	 * update shop page on the varnish server for the given chaid id
	 * @param integer $chainId
	 */
	public function updateVarnish($chainId = false)
	{
		if(! $chainId)
		{
			$chainId = $this->chainId;
		}


		$items =  static::fetchAllChainItems($chainId);

		if($items)
		{
			foreach ($items  as $data){


				$localeData = explode('/', $data['website']);
				$locale = isset($localeData[1]) ?  $localeData[1] : "en" ;

				# connect to select locale database
				$connObj = BackEnd_Helper_DatabaseManager::addConnection($locale);


				# add urls to refresh in Varnish
				$varnishObj = new Varnish($connObj['connName']);
				$varnishObj->addUrl(trim($data['websiteUrl'], '/'). '/' . $data['permalink'] );
		 		$connObj = BackEnd_Helper_DatabaseManager::closeConnection($connObj['adapter']);
			}
		}


	}

 

}