<?php

/**
 * CouponCode
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7691 2011-02-04 15:43:29Z jwage $
 */
class CouponCode extends BaseCouponCode
{
	
	//exportCodeList
	
	
	/**
	 * get list of coupon code for export
	 * @author sp singh
	 * @param integer $id offerid
	 * @return array $code
	 * @version 1.0
	 */
	public static function exportCodeList($id) {
	
		$codeList = Doctrine_Query::create()
			->select('c.code,c.status')
			->from("CouponCode c")
			->where("c.offerid = ?" ,$id)
			->fetchArray();
		
		
		return $codeList;
	
	}
	
	/**
	 * returnCodesDetail
	 * 
	 * return detrail of codes like as total code,used,availalbe
	 * 
	 * @param integer $id offer id
	 * @return array
	 * 
	 * @author spsingh
	 *  
	 */
	public static function returnCodesDetail($id)
	{
 			$data = Doctrine_Query::create()
			->select('count(c.id) as total')
				->from('CouponCode c')
				->addSelect("(SELECT  count(cc.status) FROM CouponCode cc WHERE cc.offerid = c.offerid and cc.status = 0) as used")
				->addSelect("(SELECT  count(ccc.status) FROM CouponCode ccc WHERE ccc.offerid = c.offerid and ccc.status = 1) as available")
				->where("c.offerid = " . $id )
				->fetchOne(null, Doctrine::HYDRATE_ARRAY);
			
			return $data; 
					
		
	}
	
	/**
	 * 
	 * it return an available coupon code whenever coupoun code type is unique
	 * 
	 * @param integer $id offer id
	 * @return string code;
	 * 
	 * @author sp singh
	 * 
	 */
	public static function returnAvailableCoupon($id)
	{
		$data = Doctrine_Query::create()
		->select('c.code')
		->from('CouponCode c')
		->where("c.offerid = " . $id )
		->andWhere('c.status=1')
		->limit(1)
		->fetchOne(null, Doctrine::HYDRATE_ARRAY);
			
		self::updateCodeStatus($id, $data['code']);
		return $data;
		
		
	}
		
	/**
	 * change code status
	 * @param integer $id
	 * @return ture
	 */
	public static function updateCodeStatus($id,$code,$status = 0 )
	{ 
		 Doctrine_Query::create()->update('CouponCode')
										->set('status',  $status )
										->where("code = '" . $code ."'")
										->andWhere('offerid ='.  $id) 
										->execute();
	 
		# refresh varnish if no codce is available 
		$totalAvailcode  = $data = Doctrine_Query::create()
					->select('count(id)')
					->from('CouponCode c')
					->where("c.offerid = " . $id )
					->andWhere('c.status=1')
					->fetchOne(NULL, Doctrine::HYDRATE_ARRAY);
		
	
		
		
		if($totalAvailcode['count'] == 0)
		{
			Offer::updateCache($id);
			
			// Add urls to refresh in Varnish
			$varnishObj = new Varnish();
			$varnishObj->addUrl(HTTP_PATH);
			$varnishObj->addUrl(HTTP_PATH . FrontEnd_Helper_viewHelper::__link('nieuw'));
			$varnishObj->addUrl(HTTP_PATH . FrontEnd_Helper_viewHelper::__link('populair'));
			$varnishObj->addUrl(HTTP_PATH_FRONTEND . FrontEnd_Helper_viewHelper::__link('top-20'));


			# make markplaatfeed url's get refreashed only in case of kortingscode
			iF(LOCALE == '')
			{
				
				
				if( defined(HTTP_PATH_FRONTEND) )
				{
					$varnishObj->addUrl(  HTTP_PATH_FRONTEND  . 'marktplaatsfeed');
					$varnishObj->addUrl(  HTTP_PATH_FRONTEND . 'marktplaatsmobilefeed' );
					
				}else {
					$varnishObj->addUrl(  HTTP_PATH  . 'marktplaatsfeed');
					$varnishObj->addUrl(  HTTP_PATH . 'marktplaatsmobilefeed' );
				}
			}


				
			# get all the urls related to an offer
			$varnishUrls = Offer::getAllUrls( $id );
				
			# check $varnishUrls has atleast one url
			if(isset($varnishUrls) && count($varnishUrls) > 0)
			{
				foreach($varnishUrls as $value)
				{
					$varnishObj->addUrl( HTTP_PATH . $value);
				}
			}
			
		}
	
   }
}