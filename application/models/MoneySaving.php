<?php

/**
 * MoneySaving
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ## Raman ## <##EMAIL##>
 * @version    1.0
 */

class MoneySaving extends BaseMoneySaving
{
    
    ################## REFACTORED #######################

    public static function getRecentlyAddedArticles()
    {
        $recentlyAddedeArticles = Doctrine_Query::create()->select('DISTINCT a.id, a.title, a.permalink, a.content, a.authorid, a.authorname,  ai.path, ai.name,aai.path, aai.name')
            ->from('Articles a')
            ->leftJoin('a.thumbnail ai')
            ->leftJoin('a.ArtIcon aai')
            ->leftJoin('a.refarticlecategory r')
            ->leftJoin('a.chapters chap')
            ->andWhere('a.deleted=0')
            ->orderBy('a.created_at DESC')
            ->limit(3)
            ->fetchArray();
        return $recentlyAddedeArticles;
    }

    public static function getMostReadArticles($id, $limit, $uId="")
    {
        $mostReadArticles = Doctrine_Query::create()->select('chap.*,av.id, av.articleid, (sum(av.onclick)) as pop, a.title, a.permalink, a.content, a.authorname, a.authorid, a.publishdate, ai.path, aai.name, aai.path, ai.name')
            ->from('ArticleViewCount av')
            ->leftJoin('av.articles a')
            ->leftJoin('a.thumbnail ai')
            ->leftJoin('a.chapters chap')
            ->groupBy('av.articleid')
            ->orderBy('pop DESC')
            ->where('a.deleted = 0');
            if($uId != ""){
                $mostReadArticles->andWhere('a.authorId ='.$uId.'');
            }
                $mostReadArticles = $mostReadArticles->limit($limit)
            ->fetchArray();
        return $mostReadArticles;
    }

    public static function getPage($permalink)
    {
        $pageDetails = Doctrine_Query::create()
            ->select('p.*, img.id, img.path, img.name')
            ->from('Page p')
            ->leftJoin('p.logo img')
            ->where("p.permaLink='".$permalink."'")
            ->andWhere('p.publish=1')
            ->andWhere('p.pagelock=0')
            ->andWhere('p.deleted=0')
            ->fetchArray();
        return $pageDetails;
    }

    public static function getAllMoneySavingArticles($permalink)
    {
        $allMoneySavingArticles = Doctrine_Query::create()->select('p.pageAttributeId,m.pageid,m.categoryid,r.articleid,r.relatedcategoryid,a.title, ac.name,a.permalink, ac.permalink')
            ->from('page p')
            ->leftJoin('p.moneysaving m')
            ->leftJoin('m.articlecategory ac')
            ->leftJoin('m.refarticlecategory r')
            ->leftJoin('r.articles a')
            ->where("p.permaLink ='".$permalink."'")
            ->andWhere('p.publish=1')
            ->andWhere('p.deleted=0')
            ->andWhere('a.deleted=0')
            ->andWhere('a.publish=1')
            ->orderBy('ac.name')
            ->fetchArray();
        return $allMoneySavingArticles;

    }

    public static function getCategoryWiseArticles()
    {
        $blogCategoryArticles = self::getArticleCategoryId('blog');
        $savingTipCategoryArticles =  self::getArticleCategoryId('savingtip');
        $mergedArrayOfArticles =  array('blog'=>$blogCategoryArticles, 'savingtip'=>$savingTipCategoryArticles);
        return $mergedArrayOfArticles;
    }
    
    public static function getArticleCategoryId($category)
    {
        $articleCategoryId = Doctrine_Query::create()->select('id')->from('Articlecategory ac')->where("ac.name ='".$category."'")->fetchArray();
        $allArticlesRelatedToCategory = self:: getAllMoneySavingArticlesOfcategory($articleCategoryId[0]['id']);
        return $allArticlesRelatedToCategory;
    }

    public static function getAllMoneySavingArticlesOfcategory($categoryId)
    {
        $articles = Doctrine_Query::create()->select('DISTINCT a.id, a.title, a.permalink, a.content, a.authorid, a.authorname,  ai.path, ai.name,aai.path, aai.name')
            ->from('Articles a')
            ->leftJoin('a.thumbnail ai')
            ->leftJoin('a.ArtIcon aai')
            ->leftJoin('a.refarticlecategory r')
            ->leftJoin('a.chapters chap')
            ->where('r.relatedcategoryid =' . "'$categoryId'")
            ->andWhere('a.deleted=0')
            ->fetchArray();
        return $articles;
    }
   
 ################## REFACTORED #######################

    /**
     * Get article for Money saving article from database
     * @author Raman
     * @version 1.0
     * @return array $data
     */
    public static function getSaving()
    {
        $data = Doctrine_Query::create()
        ->select('p.id,o.title,p.type,p.position,p.articleId')
        ->from('MoneysavingArticle p')
        ->leftJoin('p.article o')
        ->orderBy('p.position ASC')->fetchArray();

        return $data;

    }

    // function used for delete category
    public static function delartCategories($pageid)
    {

        $a = Doctrine_Query::create()->delete('MoneySaving')
        ->where('pageid=' . $pageid)->execute();
        //change position by 1 of each below element
        return true;

    }


    /**
     * get front end page on page id basis
     * @author Raman
     * @version 1.0
     */

    




    /**
     * All the money saving articles under all the categories on money saving page
     * @author Raman
     * @version 1.0
     */
   


    /**
     * All the money saving articles under all the categories on money saving page
     * @author kraj
     * @version 1.0
     */
    public static function getAllMoneySavingArticleForSearch($keyword,$limit)
    {
        $papularArticle = Doctrine_Query::create()->select('DISTINCT a.*,ai.*,chap.*')
        ->from('Articles a')
        ->leftJoin('a.thumbnail ai')
        ->innerJoin('a.refarticlecategory r')
        ->innerJoin('r.moneysaving m')
        ->leftJoin('a.chapters chap')->limit(6)
        ->where('a.deleted= 0')
        ->andWhere("a.title LIKE '%?%' or a.content LIKE '%?%'",$keyword,$keyword)
        ->fetchArray();
        return $papularArticle;

    }

    /**
     * generate all Money Saving Articles
     * @author Raman
     * @version 1.0
     */


    public static function generateMoneySavingArticles($id)
    {
        $papularArticle = Doctrine_Query::create()->select('DISTINCT a.id')
        ->from('Articles a')
        ->innerJoin('a.refarticlecategory r')
        ->innerJoin('r.moneysaving m')
        ->innerJoin('m.page p')
        ->where('p.id =' . "'$id'")
        ->fetchArray();
        return $papularArticle;

    }


    /**
     * generate papular Articles at the moment by formula
     * @author Raman
     * @version 1.0
     */

    public static function getMostpopularArticles($id, $limit)
    {
        $format = 'Y-m-j H:m:s';
        $date = date($format);
        $past1Day = date($format, strtotime('-1 day' . $date));
        $start = date('Y-m-d').' 00:00:00';
        $end = date('Y-m-d').' 23:59:59';
        $nowDate = $date;
        $papularArticle = Doctrine_Query::create()
        ->select('chap.*,av.articleid, a.permalink, ((sum(av.onclick)) / (DATEDIFF(NOW(),a.publishdate))) as pop, a.title,a.content, a.authorname, a.authorid,  a.publishdate, ai.path, ai.name')
        ->from('ArticleViewCount av')
        ->leftJoin('av.articles a')
        ->leftJoin('a.ArtIcon ai')
        ->leftJoin('a.chapters chap')
        ->where('av.updated_at >=' . "'$start' AND av.updated_at <="."'$end'")
        ->limit($limit)
        ->groupBy('av.articleid')
        ->orderBy('pop DESC')
        ->fetchArray();
        //echo "<pre>";
        //print_r($papularArticle); die;
        return $papularArticle;
    }

  

    /**
     * generate MS Articles related to a shop
     * @author Raman
     * @version 1.0
     */

    public static function generateShopMoneySavingGuideArticle($slug, $limit, $shopId)
    {
        $shopMoneySavingGuideArticle = Doctrine_Query::create()->select('chap.*,a.permalink,a.title,a.content, a.authorname, a.authorid, ai.path, ai.name')
        ->from('Articles a')
        ->leftJoin('a.ArtIcon ai')
        ->leftJoin('a.relatedstores rs')
        ->leftJoin('a.chapters chap')
        ->where('rs.storeid='.$shopId)
        ->andWhere('a.deleted=0')
        ->limit($limit)
        ->fetchArray();
        return $shopMoneySavingGuideArticle;
    }



    /**
     * generate most read Articles of a specific category ever
     * @author Raman
     * @version 1.0
     */
    public static function generateMostReadArticleOfcategory($catId, $limit=6)
    {
        $moneySavingArticles = self::generateMoneySavingArticlesOfcategory($catId);
        $artArr = array();
        for($i=0;$i<count($moneySavingArticles);$i++){
            $artArr[] = $moneySavingArticles[$i]['id'];
        }

        $mostReadArticle = Doctrine_Query::create()->select('chap.*, aai.path, aai.name, ai.path, ai.name,av.id, av.articleid, (sum(av.onclick)) as pop, a.title,a.content, a.authorname, a.permalink, a.authorid, a.publishdate')
        ->from('ArticleViewCount av')
        ->leftJoin('av.articles a')
        ->leftJoin('a.thumbnail ai')
        ->leftJoin('a.chapters chap')
        ->where('a.deleted=0')
        ->andWhereIn('av.articleid', $artArr)
        ->groupBy('av.articleid')
        ->orderBy('pop DESC')
        ->limit($limit)
        ->fetchArray();
        //echo "<pre>";
        //print_r($mostReadArticle); die;
        return $mostReadArticle;

    }


    /**
     * generate Money Saving Articles on category basis
     * @author Raman
     * @version 1.0
     */


    public static function generateMoneySavingArticlesOfcategory($catId)
    {
        $article = Doctrine_Query::create()->select('DISTINCT a.id')
        ->from('Articles a')
        ->innerJoin('a.refarticlecategory r')
        ->where('r.relatedcategoryid =' . "'$catId'")
        ->fetchArray();
        return $article;

    }

    /**
     * generate all related voucher code categories of money saving categories
     * @author Raman
     * @version 1.0
     */


    public static function generateRelatedCategory($catId, $limit=10)
    {
        $relatedCategory = Doctrine_Query::create()->select('ac.id, r.name, r.permaLink, ci.path, ci.name')
        ->from('Articlecategory ac')
        ->leftJoin('ac.relatedcategory r')
        ->leftJoin('r.categoryicon ci')
        ->where('ac.id ='."'$catId'")
        ->limit($limit)
        //->getSqlQuery();
        ->fetchArray();
        return $relatedCategory;

    }

    /**
     * generate all Money Saving Articles on category basis
     * @author Raman
     * @version 1.0
     */


  
}
