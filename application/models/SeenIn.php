<?php

/**
 * SeenIn
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    ##PACKAGE## 
 * @subpackage ##SUBPACKAGE##
 * @author     ##Er.kundal ## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7691 2011-02-04 15:43:29Z jwage $
 */
class SeenIn extends BaseSeenIn
{

	
	/**
	 *  @return mixed SeeIn content array or false if doesn't exists!
	 */
	
	public static function getSeenInContent()
	{
	
		$retVal = array();
	    // This is getting value from Seenin section of homePage details from DB
	   
		$retVal = self::checkSeenInContent() ;
		
		if($retVal)
		{
			//$ids = implode(",", $retVal);
			 
			$seenIn = Doctrine_Query::create()
			->select()
			->from("SeenIn s")
			->leftJoin('s.logo l')
			->whereIn('s.id',$retVal)->fetchArray();
			 
			return $seenIn ;
		}
	}
	
	/**
	*
	* @param array request array  saving SeeIn
	 * @return integer id
	 */
	 public static function  update($params)
	 {
	 	
	 	
		for( $i=1 ;$i < 7 ; $i++ )
		{
		 	$retVal = self::checkSeenInContent1( "seenin_". $i ) ;
			
			
			 # check if it has integer id of footer
			
			 if($retVal)
			 {
				# create object of previous data
			 	$seenIn = Doctrine_Core::getTable("SeenIn")->find($retVal) ;
			 
			 } else
			 {
			 	# new object
			 	$seenIn = new SeenIn() ;
			 }
			
		
			 	$seenIn->altText = @$params['alt-'. $i] ?  $params['alt-'. $i] 
			 					: null ;
			 	
				 
			 	 //  upload small logo image for how to use page
			 	if (isset($_FILES['image-'.$i])) {
			 
			 		
				 	$result = self::uploadImage('image-'.$i);
				 	
				 	
				 	if ($result['status'] == '200') {
				 		
				 	//$prevImage = $seenIn->logo->name ; 
				 	$viewHelper = new BackEnd_Helper_viewHelper();
				 	
				 	$ext = $viewHelper->getImageExtension(
				 			$result['fileName']);
				 	
					 	$seenIn->logo->ext = @$ext;
					 	$seenIn->logo->path = @$result['path'];
					 	$seenIn->logo->name = @BackEnd_Helper_viewHelper::stripSlashesFromString(
					 				$result['fileName']);
				 	}
			 	}
			 	
			 	
	 
		 	
		 	$seenIn->status =  0 ;
		
		 	$seenIn->save();
		 	FrontEnd_Helper_viewHelper::clearCacheByKeyOrAll('all_homeseenin_list');
		
		 	if(! $retVal)
		 	{
		 		self::newSeenInSetting($seenIn->id , "SEENIN_". $i);
		 	}
		
		 	$seenIn->free(true) ;
		 	// return $seenIn->id ;
		}
	
	}
	
	/**
	* check SeeIn is exist or not
	* by geetings its setting value
	* Author : Er.kundal
	 * @return mixed setting value or false
	 */
	
	public static function checkSeenInContent1($name)
	{
		
		return Settings::getSettings($name) ;
		
		
	}
	
	 public static function checkSeenInContent()
	 {
	 	$seenIn = array();
	 	$seenIn[] = Settings::getSettings(Settings::SEENIN_1) ;
	 	$seenIn[] = Settings::getSettings(Settings::SEENIN_2) ;
	 	$seenIn[] = Settings::getSettings(Settings::SEENIN_3) ;
	 	$seenIn[] = Settings::getSettings(Settings::SEENIN_4) ;
	 	$seenIn[] = Settings::getSettings(Settings::SEENIN_5) ;
	 	$seenIn[] = Settings::getSettings(Settings::SEENIN_6) ;
	 	return $seenIn;
	 }
	
	/**
	*  save new special settings
	*  @param $id integer special id
	*/
	public static  function newSeenInSetting($id, $name)
	{


		$settings =  new Settings();
		$settings->name =  constant(  "Settings::" . $name ) ;
		$settings->value = $id ;
		$settings->save();
		//call cache function
		FrontEnd_Helper_viewHelper::clearCacheByKeyOrAll('all_homeseenin_list');
		

	}
	
	
	
	
	
	
	/**
	 * upload image
	 * @param $_FILES[index]  $file
	 */
	public static function uploadImage($file) {
	
		if (!file_exists(UPLOAD_IMG_PATH))
			mkdir(UPLOAD_IMG_PATH);
	
		// generate upload path for images related to shop
		$uploadPath = UPLOAD_IMG_PATH . "homepage/";
		
		if(!file_exists($uploadPath))
			mkdir($uploadPath, 776, TRUE);
		$adapter = new Zend_File_Transfer_Adapter_Http();
	
		// generate real path for upload path
		$rootPath = ROOT_PATH . $uploadPath;
	
		// get upload file info
		$files = $adapter->getFileInfo($file);
	
		// check upload directory exists, if no then create upload directory
		if (!file_exists($rootPath))
			mkdir($rootPath);
	
		// set destination path and apply validations
		$adapter->setDestination($rootPath);
		$adapter->addValidator('Extension', false, array('jpg,jpeg,png', true));
	
		// get file name
		$name = $adapter->getFileName($file, false);
	
		// rename file name to by prefixing current unix timestamp
		$newName = time() . "_" . $name;
	
		// generates complete path of image
		$cp = $rootPath . $newName;
	
	
		$path = ROOT_PATH . $uploadPath . "thum_" . $newName;
		$viewHelper = new BackEnd_Helper_viewHelper();
		$viewHelper->resizeImage($files[$file] , $newName , 132, 0, $path);
	
		
		$path = ROOT_PATH . $uploadPath . "thum_SeenIn_large" . $newName;
		BackEnd_Helper_viewHelper::resizeImage($files[$file] , $newName ,124, 0, $path);
		// apply filter to rename file name and set target
		$adapter
		->addFilter(
				new Zend_Filter_File_Rename(
						array('target' => $cp, 'overwrite' => true)),
				null, $file);
	
		// recieve file for upload
		$adapter->receive($file);
	
		// check is file is valid then
	
		if ($adapter->isValid($file)) {
	
			return array("fileName" => $newName, "status" => "200",
					"msg" => "File uploaded successfully",
					"path" => $uploadPath);
	
		} else {
	
			return array("status" => "-1",
					"msg" => "Please upload the valid file");
	
		}
	
	}
}