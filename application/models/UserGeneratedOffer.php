<?php
/**
 * Offer
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class UserGeneratedOffer extends BaseOffer
{
    public static function getofferList($parameters)
    {
        $userRole           = Auth_StaffAdapter::getIdentity()->roleId;
        $searchOffer        = $parameters["offerText"]!='undefined' ? $parameters["offerText"] : '';
        $searchShop         = $parameters["shopText"]!='undefined' ? $parameters["shopText"] : '';
        $searchCoupon       = @$parameters["shopCoupon"]!='undefined' ? @$parameters["shopCoupon"] : '';
        $searchCouponType   = $parameters["couponType"]!='undefined' ? $parameters["couponType"] : '';
        $deletedStatus      = $parameters['flag'];
        $getOffersQuery = Doctrine_Query::create()
            ->select(
                'o.id,o.id,o.title, s.name,s.accountManagerName as acName,o.totalViewcount as clicks,
                o.discountType,o.Visability,o.extendedOffer,o.startDate,o.endDate,authorName,o.refURL,o.couponcode'
            )
            ->from("UserGeneratedOffer o")
            ->leftJoin('o.shop s')
            ->where('o.deleted='.$deletedStatus)
            ->andWhere("o.userGenerated = 1");
        if ($userRole=='4') {
            $getOffersQuery->andWhere("o.Visability='DE'");
        }
        if ($searchOffer != '') {
            $getOffersQuery->andWhere("o.title LIKE ?", "%".$searchOffer."%");
        }
        if ($searchShop!='') {
            $getOffersQuery->andWhere("s.name LIKE ?", "%".$searchShop."%");
        }
        if ($searchCoupon!='') {
            $getOffersQuery->andWhere("o.couponcode LIKE ?", "%".$searchCoupon."%");
        }
        if ($searchCouponType!='') {
            $getOffersQuery->andWhere("o.discountType='".$searchCouponType."'");
        }
        $offersList = DataTable_Helper::generateDataTableResponse(
            $getOffersQuery,
            $parameters,
            array("__identifier" => 'o.id','o.title','s.name','o.discountType','o.refURL','o.couponcode','o.startDate',
                'o.endDate', 'clicks','authorName'),
            array(),
            array()
        );
        return $offersList;
    }

    public static function searchToFiveOffer($keyword, $flag)
    {
        $data = Doctrine_Query::create()
        ->select('o.title as title')
        ->from("UserGeneratedOffer o")
        ->where('o.deleted=' . "'$flag'")
        ->andWhere('o.offline = 0')
        ->andWhere("o.title LIKE ?", "$keyword%")
        ->andWhere("o.userGenerated = '1'")
        ->orderBy("o.title ASC")->limit(5)->fetchArray();
        return $data;
    }
    
    public static function searchToFiveShop($keyword, $flag)
    {
        $data = Doctrine_Query::create()
        ->select('o.id,s.name as name')
        ->from("UserGeneratedOffer o")->leftJoin('o.shop s')
        ->where('o.deleted=' . "'$flag'")
        ->andWhere('s.status = 1')
        ->andWhere("s.name LIKE '".$keyword."%'")
        ->andWhere("o.userGenerated = '1'")
        ->orderBy("s.id ASC")->limit(5)->fetchArray();
        return $data;
    }

    public static function searchToFiveCoupon($keyword, $flag)
    {
        $data = Doctrine_Query::create()
        ->select()
        ->from("UserGeneratedOffer o")
        ->where('o.deleted=' . "'$flag'")
        ->andWhere("o.couponcode LIKE ?", "$keyword%")
        ->andWhere("o.userGenerated = '1'")
        ->orderBy("o.id ASC")
        ->limit(5)
        ->fetchArray();
        return $data;
    }

    public function saveOffer($params)
    {
        // check the offer type
        if (isset($params['defaultoffercheckbox'])) {
            $this->Visability = 'DE';
            if ($params['selctedshop']!='') {
                $this->shopId = $params['selctedshop'];
            }
        } else {
            $this->Visability = 'MEM';
        }
        // check the discountype
        if (isset($params['couponCodeCheckbox'])) {
            $this->discountType = 'CD';
            $this->couponCode = $params['couponCode'];
            if (isset($params['selectedcategories'])) {
                foreach ($params['selectedcategories'] as $categories) {
                    $this->refOfferCategory[]->categoryId = $categories ;
                }
            }
        } else if (isset($params['couponCodeCheckbox'])) {
            $this->discountType = 'SL';
        } else {
            $this->discountType = 'PA';
            //check printable document
            if (isset($params['uploadoffercheck'])) {
                $fileName = self::uploadFile($_FILES['uploadoffer']['name']);
                $ext =  BackEnd_Helper_viewHelper::getImageExtension($fileName);
                $pattern = '/^[0-9]{10}_(.+)/i' ;
                preg_match($pattern, $fileName, $matches);
                if (@$matches[1]) {
                    $this->logo->ext = $ext;
                    $this->logo->path ='images/upload/offer';
                    $this->logo->name = BackEnd_Helper_viewHelper::stripSlashesFromString($fileName);
                }
            } else {
                $this->refOfferUrl = BackEnd_Helper_viewHelper::stripSlashesFromString($params['offerrefurlPR']);
            }
        }

        $this->title = BackEnd_Helper_viewHelper::stripSlashesFromString($params['addofferTitle']);
        if (isset($params['deepLinkStatus'])) {
            $this->refURL =  BackEnd_Helper_viewHelper::stripSlashesFromString($params['offerRefUrl']);
        }
        foreach ($params['termsAndcondition'] as $terms) {
            if (trim($terms)!='') {
                $this->termandcondition[]->content = BackEnd_Helper_viewHelper::stripSlashesFromString($terms) ;
            }
        }

        $this->startDate = date('Y-m-d', strtotime($params['offerStartDate'])).' '.date('H:i:s', strtotime($params['offerstartTime'])) ;
        $this->endDate = date('Y-m-d', strtotime($params['offerEndDate'])).' '.date('H:i:s', strtotime($params['offerendTime'])) ;

        if (isset($params['attachedpages'])) {
            foreach ($params['attachedpages'] as $pageId) {
                $this->refOfferPage[]->pageId = $pageId ;
            }
        }

        if (isset($params['extendedoffercheckbox'])) {
            $this->extendedOffer = $params['extendedoffercheckbox'];
            $this->extendedTitle = BackEnd_Helper_viewHelper::stripSlashesFromString($params['extendedOfferTitle']);
            $this->extendedUrl = BackEnd_Helper_viewHelper::stripSlashesFromString($params['extendedOfferRefurl']);
            $this->extendedMetaDescription = BackEnd_Helper_viewHelper::stripSlashesFromString($params['extendedOfferMetadesc']);
            $this->extendedFullDescription = BackEnd_Helper_viewHelper::stripSlashesFromString($params['couponInfo']);
        }

        $this->exclusiveCode=$this->editorPicks=0;
        if (isset($params['exclusivecheckbox'])) {
            $this->exclusiveCode=1;
        }
        if (isset($params['editorpickcheckbox'])) {
            $this->editorPicks=1;
        }
        $this->save();
        //call cache function
        $key = '6_topOffers'  . intval($params['selctedshop']) . '_list';
        FrontEnd_Helper_viewHelper::clearCacheByKeyOrAll($key);
        $shophowtokey = '6_topOffersHowto'  . intval($params['selctedshop']) . '_list';
        FrontEnd_Helper_viewHelper::clearCacheByKeyOrAll($shophowtokey);
        $key = 'shop_latestUpdates'  . intval($params['selctedshop']) . '_list';
        FrontEnd_Helper_viewHelper::clearCacheByKeyOrAll($key);

        $key = 'shop_expiredOffers'  . intval($params['selctedshop']) . '_list';
        FrontEnd_Helper_viewHelper::clearCacheByKeyOrAll($key);
        FrontEnd_Helper_viewHelper::clearCacheByKeyOrAll('all_offer_list');
        FrontEnd_Helper_viewHelper::clearCacheByKeyOrAll('all_newOffer_list');
        FrontEnd_Helper_viewHelper::clearCacheByKeyOrAll('new_offersPageHeader_image');
        FrontEnd_Helper_viewHelper::clearCacheByKeyOrAll('all_newpopularcode_list');
        FrontEnd_Helper_viewHelper::clearCacheByKeyOrAll('10_newOffers_list');
    }

   
    public function updateOffer($params)
    {
        
        if (isset($params['yesoffercheckbox'])) {
            $this->approved = 1;
            $this->shopId = $params['selctedshop'];
        } else {
            $this->approved = 0;
        }
     
        if (isset($params['couponCodeCheckbox'])) {
            $this->discountType = 'CD';
            $this->couponCode = $params['couponCode'];
            $this->refOfferCategory->delete();
            if (isset($params['selectedcategories'])) {
                foreach ($params['selectedcategories'] as $categories) {
                    $this->refOfferCategory[]->categoryId = $categories;
                }
            }
        } else if (isset($params['saleCheckbox'])) {
            $this->discountType = 'SL';
        } else {
            $this->discountType = 'PA';
            if (isset($params['uploadoffercheck'])) {
                $this->refOfferUrl = '';
                echo $fileName = self::uploadFile($_FILES['uploadoffer']['name']);
                $ext =  BackEnd_Helper_viewHelper::getImageExtension($fileName);
                $pattern = '/^[0-9]{10}_(.+)/i' ;
                preg_match($pattern, $fileName, $matches);
                if (@$matches[1]) {
                    $this->logo->ext = $ext;
                    $this->logo->path ='images/upload/offer';
                    $this->logo->name = BackEnd_Helper_viewHelper::stripSlashesFromString($fileName);
                }
            } else {
                $this->refOfferUrl = BackEnd_Helper_viewHelper::stripSlashesFromString($params['offerrefurlPR']);
            }
        }

        if (isset($params['addofferTitle'])) {
            $this->title = BackEnd_Helper_viewHelper::stripSlashesFromString($params['addofferTitle']);
        }

        if (isset($params['deepLinkStatus'])) {
            $this->refURL =  BackEnd_Helper_viewHelper::stripSlashesFromString($params['offerRefUrl']);
        } else {
            $this->refURL =  '';
        }


        if (isset($params['description'])) {
            $this->extendedFullDescription = BackEnd_Helper_viewHelper::stripSlashesFromString($params['description']);
        }
        //echo $this->extendedFullDescription;die;
        $this->startDate = date('Y-m-d', strtotime($params['offerStartDate'])).' '.date('H:i:s', strtotime($params['offerstartTime']));
        $this->endDate = date('Y-m-d', strtotime($params['offerEndDate'])).' '.date('H:i:s', strtotime($params['offerendTime']));


        $this->refOfferPage->delete();
        if (isset($params['attachedpages'])) {
            foreach ($params['attachedpages'] as $pageId) {
                $this->refOfferPage[]->pageId = $pageId;
            }
        }
        $this->save();
        $key = '6_topOffers'  . intval($params['selctedshop']) . '_list';
        FrontEnd_Helper_viewHelper::clearCacheByKeyOrAll($key);
        $shophowtokey = '6_topOffersHowto'  . intval($params['selctedshop']) . '_list';
        FrontEnd_Helper_viewHelper::clearCacheByKeyOrAll($shophowtokey);
        $key = 'shop_latestUpdates'  . intval($params['selctedshop']) . '_list';
        FrontEnd_Helper_viewHelper::clearCacheByKeyOrAll($key);

        $key = 'shop_expiredOffers'  .intval($params['selctedshop']) . '_list';
        FrontEnd_Helper_viewHelper::clearCacheByKeyOrAll($key);


        FrontEnd_Helper_viewHelper::clearCacheByKeyOrAll('all_offer_list');
        FrontEnd_Helper_viewHelper::clearCacheByKeyOrAll('all_newOffer_list');
        FrontEnd_Helper_viewHelper::clearCacheByKeyOrAll('new_offersPageHeader_image');
        FrontEnd_Helper_viewHelper::clearCacheByKeyOrAll('all_newpopularcode_list');
        FrontEnd_Helper_viewHelper::clearCacheByKeyOrAll('10_newOffers_list');
    }

    public static function exportofferList()
    {
        $offerList = Doctrine_Query::create()
        ->select('o.*,s.name as shopname,s.accountManagerName as acName')
        ->from("Offer o")->leftJoin('o.shop s')
        ->where("o.deleted=0")
        ->orderBy("o.id DESC")->fetchArray();
        return $offerList;
    }

    public function getOfferDetail($offerId)
    {
        $shopDetail = Doctrine_Query::create()
        ->select('o.*,s.name,s.notes,s.accountManagerName,a.name as affname,p.id,tc.*,cat.id,img.*')
        ->from("Offer o")
        ->leftJoin('o.shop s')
        ->leftJoin('s.affliatenetwork a')
        ->leftJoin('o.page p')
        ->leftJoin('o.termandcondition tc')
        ->leftJoin('o.category cat')
        ->leftJoin('o.logo img')
        ->andWhere("o.id =$offerId")->andWhere("o.userGenerated = '1'")->fetchArray();
        return $shopDetail;
    }

    public function uploadFile($imgName)
    {
        $uploadPath = "images/upload/offer/";
        $adapter = new Zend_File_Transfer_Adapter_Http();
        $user_path = ROOT_PATH . $uploadPath;
        $img = $imgName;
        //unlink image file from folder if exist
        if ($img) {
            @unlink($user_path . $img);
            @unlink($user_path . "thum_" . $img);
            @unlink($user_path . "thum_large" . $img);
        }
        if (!file_exists($user_path)) {
            mkdir($user_path);
        }
        $adapter->setDestination(ROOT_PATH . $uploadPath);
        $adapter->addValidator('Extension', false, 'jpg,jpeg,png,gif,pdf');
        $files = $adapter->getFileInfo();
        foreach ($files as $file => $info) {
             $ext =  BackEnd_Helper_viewHelper::getImageExtension($info['name']);
            $name = $adapter->getFileName($file, false);
            $name = $adapter->getFileName($file);
            $orgName = time() . "_" . $info['name'];
            $fname = $user_path . $orgName;
            //call function resize image
            if ($ext!='pdf') {
                $path = ROOT_PATH . $uploadPath . "thum_" . $orgName;
                BackEnd_Helper_viewHelper::resizeImage(
                    $_FILES["uploadoffer"],
                    $orgName,
                    126,
                    90,
                    $path
                );
                $path = ROOT_PATH . $uploadPath . "thum_large" . $orgName;
                BackEnd_Helper_viewHelper::resizeImage(
                    $_FILES["uploadoffer"],
                    $orgName,
                    132,
                    95,
                    $path
                );
            }
            $adapter->addFilter(
                new Zend_Filter_File_Rename(
                    array(
                        'target' => $fname,
                        'overwrite' => true
                    )
                ),
                null,
                $file
            );
            $adapter->receive($file);
            $status = "";
            $data = "";
            $msg = "";
            if ($adapter->isValid($file) == 1) {
                $data = $orgName;
            }
            return $data;
        }
    }

    public function addOffer($params)
    {
        $title = $params['offer_name'];
        $this->Visability = 'DE';
        $this->discountType = 'CD';
        $this->extendedFullDescription = $params['offer_desc'];
        $this->shopId = $params['shopId'];
        $this->couponCode = BackEnd_Helper_viewHelper::stripSlashesFromString($params['offer_code']);
        $this->userGenerated = true;
        $this->authorId = Auth_VisitorAdapter::getIdentity()->id;
        $this->authorName = Auth_VisitorAdapter::getIdentity()->firstName;
        $this->save();
    }
}
