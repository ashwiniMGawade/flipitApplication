<?php

/**
 * Widget
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7691 2011-02-04 15:43:29Z jwage $
 */
class Widget extends BaseWidget
{
    /**
     * save widget in database
     * @param array $params
     */
    public function addWidget($params)
    {
        $w = new Widget();
        $w->title = BackEnd_Helper_viewHelper::stripSlashesFromString($params ['title']);
        $w->content = BackEnd_Helper_viewHelper::stripSlashesFromString($params ['content']);
        $w->save ();
        //call cache function
        FrontEnd_Helper_viewHelper::clearCacheByKeyOrAll('all_widget_list');
        return $w->id;
    }

    /**
     * get widget list from database for
     * @param array $params
     */

     function getDefaultwidgetList()
     {
        $widgetsList = Doctrine_Query::create()->select()
                    ->from('widget w')
                    ->where('w.userDefined=0')
                    ->andWhere('w.deleted=0')
                    ->andWhere('status = 1')
                    ->fetchArray();
        return $widgetsList;
     }

     function getUserDefinedwidgetList()
     {
        $widgetsList = Doctrine_Query::create()->select()
        ->from('widget w')
        ->where('w.deleted=0')
        ->andWhere('w.status=1')
        ->orderBy('title')
        ->fetchArray();
        return $widgetsList;
     }




/**
 * changeStatus changes the status to online and offline
 * @param $params
 * @author mkaur
 */
    public static function changeStatus($params)
    {
        $status = new Widget();
        if ($params['state'] == 'online') {
            $status = Doctrine_Query::create ()
            ->update ('Widget')
            ->set ('status','1')
            ->where ('id='.$params['id'])
            ->execute();
            return $params['id'];
        }
        if ($params['state'] == 'offline') {
            $status = Doctrine_Query::create ()
            ->update('Widget')
            ->set('status', '0')
            ->where('id='.$params['id'])
            ->execute();
            return $params['id'];
        } else {
            $id = null;
        }
        //call cache function
        FrontEnd_Helper_viewHelper::clearCacheByKeyOrAll('all_widget_list');
    }
/**
 * @return Doctrine_Query, Doctrine_Query_Abstracts
 * @author mkaur updated by blal
 */
    public static function getWidgetList($params)
    {
        $srh = @$params["searchText"] != 'undefined' ? @$params["searchText"] : '';
        //$srh = isset($params["searchText"]) ? $params["searchText"] : '';
        $data = Doctrine_Query::create ()
        ->select ('w.*')
        ->from ("Widget w")
        ->Where("deleted = 0" )
        ->andWhere("w.title LIKE ?", "$srh%")
        ->orderBy("w.id DESC");

        $list = DataTable_Helper::generateDataTableResponse($data,
                $params, array("__identifier" => 'w.id', 'w.id','w.title','w.content'),
                array(), array());

        return $list;
    }
/**
 * Search top five shops and shows in autocomplete
 * @param string $flag
 * @author mkaur
 * @version 1.0
 */
    public static function searchKeyword($keyword)
    {
        $data = Doctrine_Query::create()->select('w.title as title')
        ->from("Widget w")
        ->where("w.title LIKE ?", "$keyword%")
        ->andWhere("w.status=1")
        ->orderBy("w.title ASC")
        ->limit(5)->fetchArray();
        return $data;
    }
    public static function updateWidget($id)
    {
        $data = Doctrine_Query::create()->select('w.*')
        ->from("Widget w")
        ->where("w.id=".$id)
        ->fetchOne(null, Doctrine::HYDRATE_ARRAY);
        //echo $data->getSqlQuery(); die;
        //call cache function
        FrontEnd_Helper_viewHelper::clearCacheByKeyOrAll('all_widget_list');
        return $data;

    }

    public function editWidgetRecord($params)
    {
        $content = addslashes($params['content']);
        $data = Doctrine_Query::create()
        ->update('widget w')
        ->set('w.title',"'". BackEnd_Helper_viewHelper::stripSlashesFromString($params['title']) ."'")
        ->set('w.content',"'". BackEnd_Helper_viewHelper::stripSlashesFromString($content) ."'")
        ->where('w.id='.$params['id']);
        $data->execute();
        //echo $data->getSqlQuery(); die();
        //call cache function
        FrontEnd_Helper_viewHelper::clearCacheByKeyOrAll('all_widget_list');
        return true;
    }
    /**
     * permanent delete record from database table.
     * @param $id
     * @author mkaur
     */
    public function permanentDeleteWidget($id)
    {
        if ($id) {
            $u1 = Doctrine_Core::getTable("refPageWidget")->find($id);
            $del1 = Doctrine_Query::create()->delete()
                ->from('refPageWidget pw')
                ->where("pw.widgetId=" . $id)
                ->execute();

            $u2 = Doctrine_Core::getTable("Widget")->find($id);
            $del2 = Doctrine_Query::create()->delete()
                ->delete('Widget w')
                ->where("w.id=" . $id)
                ->execute();
            /*$u = Doctrine_Core::getTable("Widget")->find($id);
            $u->delete();*/
        } else {
            $id = null;
        }
        //call cache function
        FrontEnd_Helper_viewHelper::clearCacheByKeyOrAll('all_widget_list');
        return $id;
    }

    /**
     * getAllUrls
     *
     * returns the realted pages url
     *
     * @param integer $id  offer_news id
     * @author Surinderpal Singh
     * @return array array of urls
     */
    public static function getAllUrls($id)
    {
        $data  = Doctrine_Query::create()->select("p.permaLink,w.id")
            ->from('Widget w')
            ->leftJoin("w.page p")
            ->where("w.id=? " , $id)
            ->andWhere("p.deleted=0")
            ->fetchOne(null, Doctrine::HYDRATE_ARRAY);

        $urlsArray = array();

        # check this widget has one or more related pages
        if(isset($data['page']) && count($data['page']) > 0 ) {
            # traverse through all shops
            foreach($data['page'] as $value) {
                # check if a category has permalink then add it into array
                if(isset($value['permaLink']) && strlen($value['permaLink']) > 0 ) {
                    $urlsArray[] = $value['permaLink'] ;
                }
            }
        }
        return $urlsArray ;
    }
}
