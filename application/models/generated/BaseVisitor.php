<?php
Doctrine_Manager::getInstance()->bindComponent('Visitor', 'doctrine_site');

/**
 * BaseVisitor
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $firstName
 * @property string $lastName
 * @property string $email
 * @property string $password
 * @property boolean $status
 * @property integer $roleId
 * @property integer $imageId
 * @property boolean $gender
 * @property date $dateofbirth
 * @property integer $postalcode
 * @property boolean $weeklynewsletter
 * @property boolean $fashionnewsletter
 * @property boolean $travelnewsletter 
 * @property boolean $codealert 
 * @property integer $createdBy
 * @property timestamp $currentLogIn
 * @property timestamp $lastLogIn
 * @property boolean $active
 * @property ProfileImage $profileimage
 * @property Visitor $visitor
 * @property Doctrine_Collection $website
 * @property Doctrine_Collection $refUserWebsite
 * 
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7691 2011-02-04 15:43:29Z jwage $
 */
abstract class BaseVisitor extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('visitor');
        $this->hasColumn('id', 'integer', 20, array(
             'primary' => true,
             'type' => 'integer',
             'autoincrement' => true,
             'comment' => 'PK',
             'length' => '20',
             ));
        $this->hasColumn('username', 'string', 255, array(
        		'type' => 'string',
        		'length' => '255',
        ));
        $this->hasColumn('active_codeid', 'string', 255, array(
        		'type' => 'integer',
        		'length' => '20',
        ));
        $this->hasColumn('profile_img', 'string', 255, array(
        		'type' => 'string',
        		'length' => '255',
        ));
        $this->hasColumn('interested', 'string', 255, array(
        		'type' => 'string',
        		'length' => '255',
        ));
        $this->hasColumn('firstName', 'string', 50, array(
             'type' => 'string',
             'length' => '50',
             ));
        $this->hasColumn('lastName', 'string', 50, array(
             'type' => 'string',
             'length' => '50'

             ));
        $this->hasColumn('email', 'string', 50, array(
             'unique' => true,
             'type' => 'string',
             'length' => '255'
             ));
        $this->hasColumn('password', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('pwd', 'string', 255, array(
        		'type' => 'string',
        		'length' => '50',
        ));
        $this->hasColumn('status', 'boolean', null, array(
             'default' => 1,
             'type' => 'boolean',
             ));
        $this->hasColumn('imageId', 'integer', 20, array(
             'unique' => true,
             'type' => 'integer',
             'comment' => 'FK to visitor_image.id',
             'length' => '20',
             ));
        $this->hasColumn('gender', 'boolean', null, array(
        		'default' => 0,
        		'type' => 'boolean',
        ));
        $this->hasColumn('dateOfBirth', 'date', null, array(
        		'type' => 'date',
        ));
        $this->hasColumn('postalCode', 'string',255, array(
        		'type' => 'string',
             	'length' => '255',
        ));
        $this->hasColumn('weeklyNewsLetter', 'boolean', null, array(
        		'default' => 0,
        		'type' => 'boolean',
        ));
        $this->hasColumn('fashionNewsLetter', 'boolean', null, array(
        		'default' => 0,
        		'type' => 'boolean',
        ));
        $this->hasColumn('travelNewsLetter', 'boolean', null, array(
        		'default' => 0,
        		'type' => 'boolean',
        ));
        $this->hasColumn('codeAlert', 'boolean', null, array(
        		'default' => 0,
        		'type' => 'boolean',
        ));
        $this->hasColumn('createdBy', 'integer', 20, array(
             'type' => 'integer',
             'comment' => 'FK to user.id',
             'length' => '20',
             ));
        
        $this->hasColumn('currentLogIn', 'timestamp', null, array(
        		'type' => 'timestamp',
        	 ));
        
        $this->hasColumn('lastLogIn', 'timestamp', null, array(
        		'type' => 'timestamp',
        	 ));
        $this->hasColumn('active', 'boolean', null, array(
        		'default' => 1,
        		'type' => 'boolean',
        ));
        $this->hasColumn('changepasswordrequest', 'boolean', null, array(
        		'default' => 1,
        		'type' => 'boolean',
        ));
        
      /*  $this->hasColumn('locale', 'string', 5, array(
        		'length' => '5',
        		'type' => 'string',
        ));*/
    }

    public function setUp()
    {
        parent::setUp();


        $this->hasOne('VisitorImage as visitorimage', array(
             'local' => 'imageId',
             'foreign' => 'id'));

        
        $this->hasMany('VisitorKeyword as keywords', array(
        		'local' => 'id',
        		'foreign' => 'visitorId'));
        
        
        $this->hasMany('FavoriteShop as favoritevisitorshops', array(
        		'local' => 'id',
        		'foreign' => 'visitorId'));
        
        $softdelete0 = new Doctrine_Template_SoftDelete(array(
             'name' => 'deleted',
             'type' => 'boolean',
             'options' => 
             array(
              'default' => 0,
             ),
             ));
        $timestampable0 = new Doctrine_Template_Timestampable(array(
             'created' => 
             array(
              'name' => 'created_at',
             ),
             'updated' => 
             array(
              'name' => 'updated_at',
             ),
             ));
        
        
        $this->actAs($softdelete0);
        $this->actAs($timestampable0);
    }
}