<?php
Doctrine_Manager::getInstance()->bindComponent('Website', 'doctrine');
/**
 * BaseWebsite
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @property integer $id
 * @property string $name
 * @property string $url
 * @property Doctrine_Collection $user
 * @property Doctrine_Collection $refUserWebsite
 *
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7691 2011-02-04 15:43:29Z jwage $
 */
abstract class BaseWebsite extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('website');
        $this->hasColumn('id', 'integer', 11, array(
             'primary' => true,
             'type' => 'integer',
             'autoincrement' => true,
             'comment' => 'PK',
             'length' => '11',
             ));
        $this->hasColumn('name', 'string', 100, array(
             'type' => 'string',
             'length' => '100',
             ));
        $this->hasColumn('url', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('status', 'string', 10, array(
             'type' => 'string',
             'length' => '10',
             ));
        $this->hasColumn('chain', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
    }

    public function setUp()
    {
        parent::setUp();

        $this->hasMany('User as user', array(
             'refClass' => 'refUserWebsite',
             'local' => 'websiteId',
             'foreign' => 'userId'));

        $this->hasMany('refUserWebsite', array(
             'local' => 'id',
             'foreign' => 'websiteId'));


        $this->hasMany('refUserWebsite', array(
                'local' => 'id',
                'foreign' => 'websiteId'));

        $this->hasMany('ChainItem  as chainItem', array(
                'local' => 'id',
                'foreign' => 'webisteId'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             'created' =>
             array(
              'name' => 'created_at',
             ),
             'updated' =>
             array(
              'name' => 'updated_at',
             ),
        ));

        $softdelete0 = new Doctrine_Template_SoftDelete(array(
             'name' => 'deleted',
             'type' => 'boolean',
        ));
        $this->actAs($timestampable0);
        $this->actAs($softdelete0);
    }
}
