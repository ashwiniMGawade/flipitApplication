<?php
Doctrine_Manager::getInstance()->bindComponent('Widget', 'doctrine_site');

/**
 * BaseWidget
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @property integer $id
 * @property string $title
 * @property blob $content
 * @property boolean $status
 * @property boolean $userDefined
 * @property boolean $showWithDefault
 * @property Doctrine_Collection $page
 * @property Doctrine_Collection $refPageWidget
 *
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7691 2011-02-04 15:43:29Z jwage $
 */
abstract class BaseWidget extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('widget');
        $this->hasColumn('id', 'integer', 11, array(
             'primary' => true,
             'type' => 'integer',
             'autoincrement' => true,
             'comment' => 'PK',
             'length' => '11',
             ));
        $this->hasColumn('title', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('slug', 'string', 255, array(
                'type' => 'string',
                'length' => '255',
        ));
        $this->hasColumn('content', 'blob', null, array(
             'type' => 'blob',
             ));
        $this->hasColumn('status', 'boolean', null, array(
             'default' => 1,
             'type' => 'boolean',
             ));
        $this->hasColumn('userDefined', 'boolean', null, array(
             'default' => 0,
             'type' => 'boolean',
             ));
        $this->hasColumn('showWithDefault', 'boolean', null, array(
             'default' => 0,
             'type' => 'boolean',
             ));
        $this->hasColumn('function_name', 'string', 255, array(
            'type' => 'string',
            'length' => '255',
        ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Page as page', array(
             'refClass' => 'refPageWidget',
             'local' => 'widgetId',
             'foreign' => 'pageId'));

        $this->hasMany('refPageWidget', array(
             'local' => 'id',
             'foreign' => 'widgetId'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             'created' =>
             array(
              'name' => 'created_at',
             ),
             'updated' =>
             array(
              'name' => 'updated_at',
             ),
             ));
        $softdelete0 = new Doctrine_Template_SoftDelete(array(
             'name' => 'deleted',
             'type' => 'boolean',
             ));
        $this->actAs($timestampable0);
        $this->actAs($softdelete0);
    }
}
