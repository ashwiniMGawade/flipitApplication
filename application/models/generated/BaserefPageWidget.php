<?php
Doctrine_Manager::getInstance()->bindComponent('refPageWidget', 'doctrine_site');

/**
 * BaserefPageWidget
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @property integer $pageId
 * @property integer $widgetId
 * @property boolean $stauts
 * @property integer $position
 * @property Page $Page
 * @property Widget $Widget
 *
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7691 2011-02-04 15:43:29Z jwage $
 */
abstract class BaserefPageWidget extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('ref_page_widget');
        $this->hasColumn('pageId', 'integer', 20, array(
             'type' => 'integer',
             'notnull' => true,
             'comment' => 'FK to page.id',
             'length' => '20',
             ));
        $this->hasColumn('widgetId', 'integer', 11, array(
             'type' => 'integer',
             'notnull' => true,
             'comment' => 'FK to widget.id',
             'length' => '11',
             ));
        $this->hasColumn('stauts', 'boolean', null, array(
             'default' => 0,
             'type' => 'boolean',
             'comment' => 'if status true than widget is displayed on page',
             ));
        $this->hasColumn('position', 'integer', 5, array(
             'type' => 'integer',
             'comment' => 'display in which order',
             'length' => '5',
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Page', array(
             'local' => 'pageId',
             'foreign' => 'id'));

        $this->hasOne('Widget', array(
             'local' => 'widgetId',
             'foreign' => 'id'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             'created' =>
             array(
              'name' => 'created_at',
             ),
             'updated' =>
             array(
              'name' => 'updated_at',
             ),
             ));
        $this->actAs($timestampable0);
    }
}
