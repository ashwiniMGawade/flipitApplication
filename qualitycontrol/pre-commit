#!/usr/bin/env bash

PROJECT=`php -r "echo dirname(dirname(dirname(dirname(dirname(realpath('$0'))))));"`
FLIPIT_APPLICATION="flipit_application"
API="api"
STAGED_FILES_CMD=`git diff --cached --name-only --diff-filter=ACMR HEAD | grep \\\\.php`

# Determine if a file list is passed
if [ "$#" -eq 1 ]
then
	oIFS=$IFS
	IFS='
	'
	SFILES="$1"
	IFS=$oIFS
fi
SFILES=${SFILES:-$STAGED_FILES_CMD}
echo "Checking PHP Lint..."
for FILE in $SFILES
do
	php -l -d display_errors=0 $PROJECT/$FLIPIT_APPLICATION/$FILE
	if [ $? != 0 ]
	then
		echo "Fix the error before commit."
		exit 1
	fi
	FILES="$FILES $PROJECT/$FLIPIT_APPLICATION/$FILE"
done

if [ "$FILES" != "" ]
then
	echo "Running Code Sniffer..."
	$PROJECT/$FLIPIT_APPLICATION/bin/phpcs --standard=$PROJECT/$FLIPIT_APPLICATION/qualitycontrol/PhpCS/ruleset.xml --encoding=utf-8  -n -p $FILES
	if [ $? != 0 ]
	then
		echo "Fix the error before commit."
		exit 1
	fi

	echo "Running PHPMD..."
	$PROJECT/$FLIPIT_APPLICATION/bin/phpmd $FILES text $PROJECT/$FLIPIT_APPLICATION/qualitycontrol/PhpMD/ruleset.xml
	if [ $? != 0 ]
	then
		echo "Fix the error before commit."
		exit 1
	fi
fi

echo "Running Unit Tests..."
$PROJECT/$FLIPIT_APPLICATION/bin/codecept run --config=$PROJECT/$FLIPIT_APPLICATION/codeception.yml unit
if [ $? != 0 ]
then
	echo "Fix the error before commit."
	exit 1
fi

#$PROJECT/$FLIPIT_APPLICATION/bin/codecept run --config=$PROJECT/$FLIPIT_APPLICATION/codeception.yml --coverage

exit $?