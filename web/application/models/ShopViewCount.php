<?php

/**
 * ShopViewCount
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7691 2011-02-04 15:43:29Z jwage $
 */
class ShopViewCount extends BaseShopViewCount
{
    ##########################################
    ########### REFACTORED CODE ##############
    ##########################################
    public static function getShopClick($shopId, $clientIp)
    {
        $shopClick = Doctrine_Query::create()
            ->select('count(*) as exists')
            ->from('ShopViewCount')
            ->where('deleted=0')
            ->andWhere('onclick!=0')
            ->andWhere('shopid="'.$shopId.'"')
            ->andWhere('ip="'.$clientIp.'"')
            ->fetchArray();
        return $shopClick[0]['exists'];
    }

    public static function getSaveShopClick($shopId, $clientIp)
    {
        $shopClick  = new ShopViewCount();
        $shopClick->shopid = $shopId;
        $shopClick->onclick = 1;
        $shopClick->onload = 0;
        $shopClick->ip = $clientIp;
        $shopClick->save();
        return true;
    }

    public static function getShopOnload($shopId, $clientIp)
    {
        $shopOnload = Doctrine_Query::create()
            ->select('count(*) as exists')
            ->from('ShopViewCount')
            ->where('deleted=0')
            ->andWhere('onload!=0')
            ->andWhere('shopid="'.$shopId.'"')
            ->andWhere('ip="'.$clientIp.'"')
            ->fetchArray();
        return $shopOnload[0]['exists'];
    }

    public static function getSaveShopOnload($shopId, $clientIp)
    {
        $shopOnLoad  = new ShopViewCount();
        $shopOnLoad->shopid = $shopId;
        $shopOnLoad->onload = 1;
        $shopOnLoad->onclick = 0;
        $shopOnLoad->ip = $clientIp;
        $shopOnLoad->save();
        return true;
    }

    ##########################################
    ########### END REFACTORED CODE ##########
    ##########################################
    /**
     * get No Shops clickouts last seven days
     * @author Raman
     * @param integer $shopId
     * @return integer
     * @version 1.0
     */

    public static function getAmountClickoutOfShop($shopId)
    {
        $format = 'Y-m-j H:i:s';
        $date = date($format);

        $offers = Offer::getTotalAmountOfOffersByShopId($shopId);
        $lastWeekOfferClicks = 0;
        // - 7 days from today
        $past7Days = date($format, strtotime('-7 day' . $date));

        if(!empty($offers)){
            $dataOffer = Doctrine_Query::create()
                ->select("count(*) as amountclicks")
                ->from('ViewCount v')
                ->whereIn('v.offerId', $offers)
                ->andWhere('v.onclick = 1')
                ->andWhere('v.created_at BETWEEN "'.$past7Days.'" AND "'.$date.'"')
                ->fetchOne(null, Doctrine::HYDRATE_ARRAY) ;

            if(!empty($dataOffer)){

                $lastWeekOfferClicks = $dataOffer['amountclicks'];
            } else {
                $lastWeekOfferClicks = 0;
            }
        }

        $data = Doctrine_Query::create()
            ->select("count(*) as amountclicks")
            ->from('ShopViewCount s')
            ->where('s.deleted = 0')
            ->where('s.shopid = '.$shopId)
            ->andWhere('s.created_at BETWEEN "'.$past7Days.'" AND "'.$date.'"')
            ->fetchOne(null, Doctrine::HYDRATE_ARRAY) ;
        if(!empty($data)){

            $lastWeekShopClicks = $data['amountclicks'];
        } else {
            $lastWeekShopClicks = 0;
        }
        $lastWeekClicks = $lastWeekOfferClicks + $lastWeekShopClicks;
        return $lastWeekClicks;
    }

    /**
     * get total No. of Shops clickouts
     * @author Raman
     * @param integer $shopId
     * @return integer
     * @version 1.0
     */

    public static function getTotalAmountClicksOfShop($shopId)
    {
        $format = 'Y-m-j H:i:s';
        $date = date($format);
        $offers = Offer::getTotalAmountOfOffersByShopId($shopId);

        $totalOfferClicks = 0;
        if(!empty($offers)){
            $dataOffer = Doctrine_Query::create()
                ->select("count(*) as amountclicks")
                ->from('ViewCount v')
                ->whereIn('v.offerId', $offers)
                ->andWhere('v.onclick = 1')
                ->fetchOne(null, Doctrine::HYDRATE_ARRAY) ;

            if(!empty($dataOffer)){

                $totalOfferClicks = $dataOffer['amountclicks'];
            } else {
                $totalOfferClicks = 0;
            }
        }
        $data = Doctrine_Query::create()
        ->select("count(*)")
        ->from('ShopViewCount s')
        ->where('s.deleted = 0')
        ->andWhere('s.shopid = '.$shopId)
        ->fetchOne(null, Doctrine::HYDRATE_ARRAY) ;
        $totalShopClicks = $data['count'];

        $totalClicks = $totalOfferClicks + $totalShopClicks;
        return $totalClicks;
    }

    /**
     *
     * get total No. of Shop clickouts + offers
     *
     * @author kraj
     * @param integer $shopId
     * @return integer $totalClicks
     * @version 1.0
     *
     */
    public static function getTotalViewCountOfShopAndOffer($shopId)
    {
        $format = 'Y-m-j H:i:s';
        $date = date($format);
        $allOffers = Doctrine_Query::create()
            ->select('o.id,o.totalViewcount as clicks')
            ->from('Offer o')
            ->where('o.deleted = 0' )
            ->andWhere('o.shopId = '.$shopId)
            ->andWhere('o.enddate > "'.$date.'"')
            ->andWhere('o.startdate <= "'.$date.'"')
            ->fetchArray() ;

        $totalOfferClicks = self::tranverseAllOffer($allOffers);
        $totalShopClicks = self::getShopClicks($shopId);
        $totalClicks =  $totalOfferClicks + $totalShopClicks;
        return $totalClicks;

    }

    /**
     *
     * get total No. of offers clicks
     *
     * @author kraj
     * @param array $allOffers
     * @return integer $totalOfferClicks
     * @version 1.0
     *
     */
    public static function tranverseAllOffer($allOffers)
    {
            $totalOfferClicks = 0;
            if(!empty($allOffers)):
                foreach($allOffers as $arr):
                    $totalOfferClicks = $totalOfferClicks + $arr['clicks'];
                endforeach;
            endif;
            return $totalOfferClicks;
    }

    /**
     *
     * get total No. of shop clicks
     *
     * @author kraj
     * @param integer $shopId
     * @return integer $totalShopClicks
     * @version 1.0
     *
     */
    public static function getShopClicks($shopId)
    {
        $data = Doctrine_Query::create()
           ->select('s.id,s.totalViewcount as clicks')
           ->from('Shop s')
           ->where('s.deleted = 0')
           ->andWhere('s.id = '.$shopId)
           ->fetchOne(null, Doctrine::HYDRATE_ARRAY) ;

        $totalShopClicks = $data['clicks'];
        return $totalShopClicks;
    }
}
