<?php
Doctrine_Manager::getInstance()->bindComponent('Media', 'doctrine_site');

/**
 * BaseMedia
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @property integer $id
 * @property string $name
 * @property string $alternateText
 * @property string $caption
 * @property string $fileUrl
 * @property integer $mediaImageId
 * @property MediaImage $mediaimage
 *
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7691 2011-02-04 15:43:29Z jwage $
 */
abstract class BaseMedia extends Doctrine_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('media');
        $this->hasColumn('id', 'integer', 20, array(
             'primary' => true,
             'type' => 'integer',
             'autoincrement' => true,
             'comment' => 'PK',
             'length' => '20',
             ));
        $this->hasColumn('name', 'string', 100, array(
             'type' => 'string',
             'length' => '100',
             ));
        $this->hasColumn('alternateText', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('caption', 'string', 150, array(
             'type' => 'string',
             'length' => '150',
             ));
        $this->hasColumn('fileUrl', 'string', 255, array(
             'type' => 'string',
             'length' => '255',
             ));
        $this->hasColumn('mediaImageId', 'integer', 20, array(
             'unique' => true,
             'type' => 'integer',
             'comment' => 'FK to image.id',
             'length' => '20',
             ));
        $this->hasColumn('authorName', 'string', 100, array(
                'type' => 'string',
                'length' => '255',
        ));
        $this->hasColumn('authorId', 'integer', 20, array(
                'type' => 'string',
                'length' => '20',
        ));
        $this->hasColumn('description', 'string', 1024, array(
                'type' => 'string',
                'length' => '1024',
        ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('MediaImage as mediaimage', array(
             'local' => 'mediaImageId',
             'foreign' => 'id'));

        $softdelete0 = new Doctrine_Template_SoftDelete(array(
             'name' => 'deleted',
             'type' => 'boolean',
             ));
        $timestampable0 = new Doctrine_Template_Timestampable(array(
             'created' =>
             array(
              'name' => 'created_at',
             ),
             'updated' =>
             array(
              'name' => 'updated_at',
             ),
             ));
        $this->actAs($softdelete0);
        $this->actAs($timestampable0);
    }
}
