<?php

namespace KC\Entity\Proxy\__CG__\KC\Entity;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class User extends \KC\Entity\User implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function __get($property)
    {
        $this->__load();
        return parent::__get($property);
    }

    public function __set($property, $value)
    {
        $this->__load();
        return parent::__set($property, $value);
    }

    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function validatePassword($passwordToBeVerified)
    {
        $this->__load();
        return parent::validatePassword($passwordToBeVerified);
    }

    public function isPasswordDifferent($newPassword)
    {
        $this->__load();
        return parent::isPasswordDifferent($newPassword);
    }

    public function validateEmail($emailToBeVerified)
    {
        $this->__load();
        return parent::validateEmail($emailToBeVerified);
    }

    public function setPassword($password)
    {
        $this->__load();
        return parent::setPassword($password);
    }

    public function updateLoginTime($id)
    {
        $this->__load();
        return parent::updateLoginTime($id);
    }

    public function getPermissions()
    {
        $this->__load();
        return parent::getPermissions();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'firstName', 'lastName', 'email', 'password', 'status', 'google', 'twitter', 'pinterest', 'likes', 'dislike', 'mainText', 'createdBy', 'deleted', 'currentLogIn', 'lastLogIn', 'created_at', 'updated_at', 'showInAboutListing', 'slug', 'addtosearch', 'popularKortingscode', 'passwordChangeTime', 'countryLocale', 'editorText', 'user', 'profileimage', 'users', 'website');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}